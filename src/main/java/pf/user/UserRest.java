package pf.user;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.logging.Logger;import javax.servlet.http.HttpServletRequest;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.bind.annotation.RestController;import pf.RestLib;import pf.account.Account;import pf.account.AccountService;import pf.email.Mailer;@RestController@RequestMapping("/rest/users")public class UserRest {	private final static Logger logger = Logger.getLogger(UserRest.class.getName());	UserService userService;	AccountService accountService;	UserRepository userRepository;	public UserRest(UserRepository userRepository, AccountService accountService, UserService userService) {		this.userService = userService;		this.accountService = accountService;		this.userRepository = userRepository;	}	// login & logout are handled automatically by Soring Security	@Autowired	Mailer mailer;	@RequestMapping("/register.do")	public Map<String, String> register(@RequestParam("email") String email, @RequestParam("password") String password,			@RequestParam("password2") String password2) throws Exception {		double usdRate = 1.0;		double sarRate = 1.0;		userService.registerUser(email, password, password2, mailer, accountService, usdRate, sarRate);		return getSuccessStatus();	}	@RequestMapping("/resendVerifyEmail.do")	public Map<String, String> resendVerifyEmail(@RequestParam("email") String email) throws Exception {		userService.resendVerifyEmail(email);		return getSuccessStatus();	}	@RequestMapping("/changeSettings.do")	public Map<String, String> changeSettings(@RequestParam("email") String email,			@RequestParam("oldPassword") String oldPassword, @RequestParam("password") String password,			@RequestParam("password2") String password2, @RequestParam("usd_rate") String usdRate,			@RequestParam("sar_rate") String sarRate) throws NumberFormatException, Exception {		// TODO: Ensure the same user is changing his own settings only.		// Replace request parameter email by UserEntity		userService.updateSettings(email, oldPassword, password, password2, Double.parseDouble(usdRate),				Double.parseDouble(sarRate));		return getSuccessStatus();	}	@RequestMapping("/sendResetEMail.do")	public Map<String, String> sendResetEMail(@RequestParam("email") String email) throws Exception {		userService.sendResetEmail(email);		return getSuccessStatus();	}	@RequestMapping("/resetPassword.do")	public Map<String, String> resetPassword(@RequestParam("email") String email, @RequestParam("code") String code,			@RequestParam("password") String password, @RequestParam("password2") String password2) throws Exception {		// FIXME: ensure email is from the authenticated user only		userService.resetPassword(email, code, password, password2);		return getSuccessStatus();	}	@RequestMapping("/contactus.do")	public Map<String, String> contactus(@RequestParam("email") String email, @RequestParam("name") String name,			@RequestParam("title") String title, @RequestParam("comments") String comments) throws Exception {				if (name == null)  name = ""; 		if (title == null) title = "";// optional					userService.sendFeedbackEmail(email, name, title, comments);		return getSuccessStatus();	}	@RequestMapping("/getAccountsRoot.do")	public List<Account> getAccountsRoot(HttpServletRequest request) throws Exception {		String userEmail = request.getRemoteUser();		String userId = userRepository.findByEmail(userEmail).getId();		return accountService.getAccountsTreeWithOneRoot(userId, userEmail);	}	@RequestMapping("/getExchangeRates.do")	public Map<String, Double> getExchangeRates(HttpServletRequest request) throws Exception {		String userEmail = request.getRemoteUser();		Map<String, Double> map = new HashMap<>();		map.put("usd_rate", accountService.getUsdRate(userEmail));		map.put("sar_rate", accountService.getSarRate(userEmail));		return map;	}			@RequestMapping("/verifyEmail.do")	public Map<String, String> verifyEmail(HttpServletRequest request, 			@RequestParam("email") String email, @RequestParam("code") String code) throws Exception {				//Boolean success = new pf.web.JspRequests().verifyUserEmail(root, email, code);		String emailLower = email.toLowerCase();		User user = userService.verifyEmail(emailLower, code);		if (user != null) {			return getSuccessStatus();		} 		throw new Exception ("User email verification failed for:" + email + ", and code:" + code);	}	@RequestMapping("/exception.do")	public String exception(HttpServletRequest request) throws Exception {		throw new Exception("This is a test exception from REST!");	}		@ExceptionHandler(Exception.class)	@ResponseBody	public String handleError(HttpServletRequest req, Exception ex) {		logger.severe("Request: " + req.getRequestURL() + " raised " + ex);		return RestLib.getErrorString(ex);	}	private Map<String, String> getSuccessStatus() {		Map<String, String> map = new HashMap<>();		map.put("status", "success");		return map;	}}